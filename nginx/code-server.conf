server {
  listen 443 ssl;
  server_name hub.cadams.io;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/hub.cadams.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/hub.cadams.io/privkey.pem;

  # Any request to this server will first be sent to this URL
  auth_request /validate;

  location = /validate {
    # This address is where Vouch will be listening on
    proxy_pass http://127.0.0.1:9090/validate;
    proxy_pass_request_body off; # no need to send the POST body
    proxy_set_header Host $http_host;

    proxy_set_header Content-Length "";

    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # these return values are passed to the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
  }

  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header  X-Forwarded-Proto https;
    proxy_set_header  X-Forwarded-For $remote_addr;
    proxy_set_header  X-Forwarded-Host $remote_addr;
    proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
    proxy_http_version 1.1;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_pass http://127.0.0.1:8392;
    proxy_redirect off;
  }

  error_page 401 = @error401;

  # If the user is not logged in, redirect them to Vouch's login URL
  location @error401 {
     return 302 https://login.cadams.io/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
  }
}

server {
  listen 443 ssl;
  server_name bin.cadams.io;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/bin.cadams.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/bin.cadams.io/privkey.pem;

  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header  X-Forwarded-Proto https;
    proxy_set_header  X-Forwarded-For $remote_addr;
    proxy_set_header  X-Forwarded-Host $remote_addr;
    proxy_http_version 1.1;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_pass http://127.0.0.1:8714;
    proxy_redirect off;
  }
}

server {
  listen 443 ssl;
  server_name code.cadams.io;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/code.cadams.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/code.cadams.io/privkey.pem;

  # Any request to this server will first be sent to this URL
  auth_request /validate;

  location = /validate {
    # This address is where Vouch will be listening on
    proxy_pass http://127.0.0.1:9090/validate;
    proxy_pass_request_body off; # no need to send the POST body
    proxy_set_header Host $http_host;

    proxy_set_header Content-Length "";

    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # these return values are passed to the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
  }

  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header  X-Forwarded-Proto https;
    proxy_set_header  X-Forwarded-For $remote_addr;
    proxy_set_header  X-Forwarded-Host $remote_addr;
    proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
    proxy_http_version 1.1;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_pass http://127.0.0.1:8080;
    proxy_redirect off;
  }

  error_page 401 = @error401;

  # If the user is not logged in, redirect them to Vouch's login URL
  location @error401 {
     return 302 https://login.cadams.io/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
  }
}

server {
  listen 443 ssl;
  server_name login.cadams.io;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/login.cadams.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/login.cadams.io/privkey.pem;

  # Proxy to your Vouch instance
  location / {
    proxy_set_header  Host  login.cadams.io;
    proxy_pass        http://127.0.0.1:9090;
  }
}

server {
  listen 443 ssl;
  server_name "~^(?<subdomain>\d+)\.hub\.cadams\.io$";

  ssl on;
  ssl_certificate /etc/letsencrypt/live/hub.cadams.io-0001/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/hub.cadams.io-0001/privkey.pem;

  # Any request to this server will first be sent to this URL
  auth_request /validate;

  location = /validate {
    # This address is where Vouch will be listening on
    proxy_pass http://127.0.0.1:9090/validate;
    proxy_pass_request_body off; # no need to send the POST body
    proxy_set_header Host $http_host;

    proxy_set_header Content-Length "";

    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

    # these return values are passed to the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
  }

  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header  X-Forwarded-Proto https;
    proxy_set_header  X-Forwarded-For $remote_addr;
    proxy_set_header  X-Forwarded-Host $remote_addr;
    proxy_http_version 1.1;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
    proxy_pass http://127.0.0.1:$subdomain;
    proxy_redirect off;
  }

  error_page 401 = @error401;

  # If the user is not logged in, redirect them to Vouch's login URL
  location @error401 {
     return 302 https://login.cadams.io/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
  }
}

